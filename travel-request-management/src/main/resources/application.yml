# =========================================================
# üóÇÔ∏è MinIO Storage Configuration
# =========================================================
minio:
  endpoint: http://127.0.0.1:9000
  access-key: minioadmin
  secret-key: minioadmin
  default-bucket: travel-tickets

# =========================================================
# üåç Application Info
# =========================================================
spring:
  application:
    name: travel-request-management

  datasource:
    url: jdbc:postgresql://localhost:5432/TravelRequestDatabase
    username: TravelApplication123
    password: TravelApplication123
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 50
      minimum-idle: 10
      connection-timeout: 30000
      idle-timeout: 300000
      max-lifetime: 600000
      validation-timeout: 5000
      leak-detection-threshold: 20000

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: false
    properties:
      hibernate:
        jdbc.batch_size: 50
        jdbc.fetch_size: 100
        order_inserts: true
        order_updates: true

  cache:
    type: caffeine
    caffeine:
      spec: maximumSize=1000,expireAfterWrite=600s

  cloud:
    openfeign:
      client:
        config:
          default:
            connect-timeout: 3000
            read-timeout: 7000
            logger-level: basic

  # ‚úÖ STANDARD SPRING KAFKA CONFIG
  kafka:
    bootstrap-servers: localhost:29092

    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.add.type.headers: false

    consumer:
      group-id: travel-request-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: "*"
        spring.json.use.type.headers: false

# =========================================================
# ‚öôÔ∏è Server Configuration
# =========================================================
server:
  address: 0.0.0.0
  port: 9015
  servlet:
    context-path: /travel-management
  tomcat:
    connection-timeout: 10s
    max-threads: 200
    min-spare-threads: 20
    accept-count: 200
    max-connections: 5000

# =========================================================
# üåê External Service URLs
# =========================================================
services:
  employee:
    url: http://localhost:9010/ems
  policy:
    url: http://localhost:9012/policy
  workflow:
    url: http://localhost:9013/workflow
  notification:
    url: http://localhost:9014/notification

# =========================================================
# üß± Resilience4j Circuit Breakers
# =========================================================
resilience4j:
  circuitbreaker:
    instances:
      workflow-service:
        register-health-indicator: true
        sliding-window-size: 10
        minimum-number-of-calls: 5
        permitted-number-of-calls-in-half-open-state: 3
        automatic-transition-from-open-to-half-open-enabled: true
        wait-duration-in-open-state: 10s
        failure-rate-threshold: 50

      notification-service:
        register-health-indicator: true
        sliding-window-size: 10
        minimum-number-of-calls: 5
        permitted-number-of-calls-in-half-open-state: 3
        automatic-transition-from-open-to-half-open-enabled: true
        wait-duration-in-open-state: 10s
        failure-rate-threshold: 50

  retry:
    instances:
      workflow-service:
        max-attempts: 3
        wait-duration: 2s
      notification-service:
        max-attempts: 3
        wait-duration: 2s

# =========================================================
# üßæ Logging
# =========================================================
logging:
  level:
    root: INFO
    com.bwc.travel_request_management: DEBUG
    org.springframework.web: INFO
    org.hibernate.SQL: INFO
    org.springframework.cloud.openfeign: INFO
    org.springframework.scheduling: INFO
    org.springframework.cloud.circuitbreaker: INFO

  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

  file:
    name: logs/travel-request-management.log

  logback:
    rollingpolicy:
      max-file-size: 10MB
      max-history: 10

# =========================================================
# üìä Actuator + Prometheus
# =========================================================
management:
  server:
    port: 9115
  endpoints:
    web:
      base-path: /management
      exposure:
        include: health,info,metrics,env,circuitbreakers,threaddump,heapdump
  endpoint:
    health:
      show-details: always
      show-components: always
      probes:
        enabled: true
    metrics:
      enabled: true
    env:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}
  prometheus:
    metrics:
      export:
        enabled: true
        step: 30s
